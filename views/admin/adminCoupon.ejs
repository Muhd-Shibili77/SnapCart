<%- include ('../partial/newAdminHeader')-%>

  <!--  Body Wrapper -->
  <div class="page-wrapper" id="main-wrapper" data-layout="vertical" data-navbarbg="skin6" data-sidebartype="full"
    data-sidebar-position="fixed" data-header-position="fixed">
    <!-- Sidebar Start -->
    <aside class="left-sidebar">
      <!-- Sidebar scroll-->
      <div>
        <div class="brand-logo d-flex align-items-center justify-content-between">
          <a href="#" class="text-nowrap logo-img">
            <img src="/images/SnapCart.png" width="150" style="margin-top: 2vh;" alt="" />
          </a>
          <div class="close-btn d-xl-none d-block sidebartoggler cursor-pointer" id="sidebarCollapse">
            <i class="ti ti-x fs-8"></i>
          </div>
        </div>
        <!-- Sidebar navigation-->
        <nav class="sidebar-nav scroll-sidebar">
          <ul id="sidebarnav">
            <li class="nav-small-cap">


            </li>
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/dashboard" aria-expanded="false">
                <span>
                  <i class="ti ti-layout-dashboard"></i>
                </span>
                <span class="hide-menu">Dashboard</span>
              </a>
            </li>

            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/users" aria-expanded="false">
                <span>
                  <i class="ti ti-user"></i>
                </span>
                <span class="hide-menu">Users</span>
              </a>
            </li>
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/products" aria-expanded="false">
                <span>
                  <i class="bi bi-box-seam"></i>
                </span>
                <span class="hide-menu">Products</span>
              </a>
            </li>
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/offers" aria-expanded="false">
                <span>
                  <i class="bi bi-gift"></i>
                </span>
                <span class="hide-menu">Offers</span>
              </a>
            </li>
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/orders" aria-expanded="false">
                <span>
                  <i class="bi bi-cart2"></i>
                </span>
                <span class="hide-menu">Orders</span>
              </a>
            </li>
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/category" aria-expanded="false">
                <span>
                  <i class="ti ti-list"></i>

                </span>
                <span class="hide-menu">Categories</span>
              </a>
            </li>

            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/brand" aria-expanded="false">
                <span>
                  <i class="ti ti-crown"></i>

                </span>
                <span class="hide-menu">Brands</span>
              </a>
            </li>
            <li class="sidebar-item selected">
              <a class="sidebar-link active" href="/admin/coupon" aria-expanded="false">
                <span>
                  <i class="ti ti-ticket"></i>


                </span>
                <span class="hide-menu">Coupon</span>
              </a>
            </li>

           
            <li class="sidebar-item">
              <a class="sidebar-link" href="/admin/logout" aria-expanded="false">
                <span>
                  <i class="ti ti-login"></i>
                </span>
                <span class="hide-menu">Logout</span>
              </a>
            </li>
          </ul>
        </nav>
      </div>
    </aside>

    <!--  Sidebar End -->

    <div class="body-wrapper">

      <!--  Header Start -->
      <header class="app-header">
        <nav class="navbar navbar-expand-lg navbar-light">
          <ul class="navbar-nav">
            <li class="nav-item d-block d-xl-none">
              <a class="nav-link sidebartoggler nav-icon-hover" id="headerCollapse" href="javascript:void(0)">
                <i class="ti ti-menu-2"></i>
              </a>
            </li>

          </ul>
          <div class="navbar-collapse justify-content-end px-0" id="navbarNav">
            <ul class="navbar-nav flex-row ms-auto align-items-center justify-content-end">



              <div class="">
                <form class="  " style="width:350px;">
                  <input class="form-control search" type="search" placeholder="Search..." aria-label="Search">
                </form>
              </div>


            </ul>
        </nav>
      </header>


      <div class="container-fluid main-area">
        <div class="tab-content tab-content-basic">

          <div class="tab-pane fade show active" id="overview" role="tabpanel" aria-labelledby="overview">
            <div class="col-lg-12 grid-margin stretch-card">
              <div class="card">
                <div class="card-body">
                  <div class="row">
                    <div class="col-lg-9">
                      <h4 class="card-title">Coupon Management</h4>
                      <p class="card-description">Manage coupon details and customize the coupons.</p>
                    </div>
                    <div class="col-lg-3 text-end">
                      <button type="button" class="btn btn-outline-primary btn-icon-text" data-bs-toggle="modal"
                        data-bs-target="#addCouponModal">
                        Add New Coupon
                      </button>
                    </div>
                  </div>

                  <!-- Offers in Card View -->
                  <div class="row mt-4">
                    <!-- Dummy data for offers -->
                    <% if(typeof coupon !='undefined' && coupon.length>0){ %>
                      <% coupon.forEach((element)=>{ %>
                        <div class="col-lg-4 mb-4">
                          <div class="card offer-card shadow-sm">
                            <div class="card-body">
                              <h5 class="card-title">
                                <%=element.coupon_code %>
                              </h5>
                              <p class="card-text">
                                <strong>Discount:</strong>
                                <%=element.discount %>%<br>
                                  <strong>Start Date:</strong>
                                  <%= new Date(element.start_date).toLocaleString('en-GB', { day: 'numeric' ,
                                    month: 'numeric' , year: 'numeric' , hour: 'numeric' , minute: 'numeric' , hour12:
                                    true }) %> <br>
                                    <strong>Expiry Date:</strong>
                                    <%= new Date(element.exipry_date).toLocaleString('en-GB', { day: 'numeric' ,
                                      month: 'numeric' , year: 'numeric' , hour: 'numeric' , minute: 'numeric' , hour12:
                                      true }) %> <br>
                                      <strong>Minimum Amount:</strong> INR <%=element.min_purchase_amount%><br>
                                        <strong>Maximum coupon Amount:</strong> INR <%=element.max_coupon_amount%><br>
                                          <strong>Description:</strong><%=element.coupon_description%><br>
                              </p>
                              <div class="d-flex justify-content-between">
                                <button type="button" onclick="deleteCoupon('<%=element._id %>')"
                                  class="btn btn-danger btn-sm">Delete</button>
                                <button type="button" class="btn btn-outline-info btn-sm editBtn"
                                  data-coupon-id="<%=element._id %>" data-coupon-code="<%=element.coupon_code %>"
                                  data-coupon-discount="<%=element.discount %>"
                                  data-coupon-sdate="<%= new Date(element.start_date).toLocaleString('en-GB', { day: 'numeric' ,
                                  month: 'numeric' , year: 'numeric' , hour: 'numeric' , minute: 'numeric' , hour12:true }) %>"
                                  data-coupon-edate="<%= new Date(element.exipry_date).toLocaleString('en-GB', { day: 'numeric' ,
                                  month: 'numeric' , year: 'numeric' , hour: 'numeric' , minute: 'numeric' , hour12:true }) %>"
                                  data-coupon-minAmount="<%=element.min_purchase_amount%>"
                                  data-coupon-maxAmount=" <%=element.max_coupon_amount%>"
                                  data-coupon-description="<%=element.coupon_description%>">
                                  Edit
                                </button>
                              </div>
                            </div>
                          </div>
                        </div>
                        <% }) %>
                          <% }else{ %>
                            <div class="col-12 text-center mt-4">
                              <h4 class="card-title">No coupon available</h4>
                            </div>
                            <% } %>







                              <!-- No offers available -->

                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>





    </div>


    <!-- Add coupon Modal -->
    <div class="modal fade" id="addCouponModal" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addCouponModalLabel">Add New Offer</h5>

          </div>
          <div class="modal-body">
            <form>
              <div class="form-group">
                <label for="offerName">Coupon code</label>
                <input type="text" class="form-control" id="couponCode" name="couponCode" required>
              </div>
              <div class="form-group">
                <label for="offerPercentage">discount</label>
                <input type="number" class="form-control" id="discount" name="discount" required>
              </div>
              <div class="form-group">
                <label for="offerStartDate">Start Date</label>
                <input type="datetime-local" class="form-control" id="startDate" name="startDate" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">End Date</label>
                <input type="datetime-local" class="form-control" id="endDate" name="endDate" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Minimum Amount</label>
                <input type="Number" class="form-control" id="minAmount" name="minAmount" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Maximum coupon Amount:</label>
                <input type="Number" class="form-control" id="maxAmount" name="maxAmount" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Description</label>
                <input type="text" class="form-control" id="description" name="description" required>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline-primary" onclick="AddCoupon()">Add Coupon</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
    <!-- edit Coupon Modal -->
    <div class="modal fade" id="editCouponModal" tabindex="-1" role="dialog">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Add New Offer</h5>

          </div>
          <div class="modal-body">
            <form>
              <div class="form-group">
                <label for="offerName">Coupon code</label>
                <input type="hidden" class="form-control" id="editCouponId" name="couponId" required>
                <input type="text" class="form-control" id="editCouponCode" name="couponCode" required>
              </div>
              <div class="form-group">
                <label for="offerPercentage">discount</label>
                <input type="number" class="form-control" id="editDiscount" name="discount" required>
              </div>
              <div class="form-group">
                <label for="offerStartDate">Start Date</label>
                <input type="datetime-local" class="form-control" id="editStartDate" name="startDate" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">End Date</label>
                <input type="datetime-local" class="form-control" id="editEndDate" name="endDate" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Minimum Amount</label>
                <input type="Number" class="form-control" id="editMinAmount" name="minAmount" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Maximum coupon Amount:  </label>
                <input type="Number" class="form-control" id="editMaxAmount" name="maxAmount" required>
              </div>
              <div class="form-group">
                <label for="offerEndDate">Description</label>
                <input type="text" class="form-control" id="editDescription" name="description" required>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-outline-primary" onclick="EditCoupon()">Save Changes</button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      async function AddCoupon() {
        const Toast = Swal.mixin({
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          }
        });
        const couponCode = document.getElementById('couponCode').value.trim()
        const discount = parseInt(document.getElementById('discount').value.trim())
        const startDate = document.getElementById('startDate').value.trim()
        const endDate = document.getElementById('endDate').value.trim()
        const minAmount = document.getElementById('minAmount').value.trim()
        const maxAmount = document.getElementById('maxAmount').value.trim()
        const couponDescription = document.getElementById('description').value.trim()

        if (!couponCode) {
          Toast.fire({
            icon: "error",
            title: "Coupon code is empty"
          });
          return
        }
        if (!discount) {
          Toast.fire({
            icon: "error",
            title: "Coupon discount is empty"
          });
          return
        }
        if (isNaN(discount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Percentage",
            text: "Percentage must be a number.",
          });
          return;
        }

        if (discount < 1 || discount > 100) {
          Toast.fire({
            icon: "error",
            title: "Invalid percentage",
            text: 'Percentage not more than 100 and less than 0'
          });
          return
        }
        if (discount !== Math.floor(discount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Percentage Format",
            text: "Percentage must be a whole number.",
          });
          return;
        }


        if (!startDate) {
          Toast.fire({
            icon: "error",
            title: "Coupon startDate is empty"
          });
          return
        }
        const currentDate = new Date()
        if (startDate < currentDate) {
          Toast.fire({
            icon: "error",
            title: "Invalid Start Date",
            text: 'Start date cannot be in the past.',
          });
          return;
        }

        if (!endDate) {
          Toast.fire({
            icon: "error",
            title: "Coupon endDate is empty"
          });
          return
        }
        if (endDate <= startDate) {
          Toast.fire({
            icon: "error",
            title: "Invalid End Date",
            text: 'End date must be after the start date.',
          });
          return;
        }

        if (!minAmount) {
          Toast.fire({
            icon: "error",
            title: "Coupon minAmount is empty"
          });
          return
        }
        if (isNaN(minAmount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Min Amount must be a number.",
          });
          return;
        }
        if (parseInt(minAmount) === 0) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Min Amount cannot be zero.",
          });
          return;
        }
        if (!maxAmount) {
          Toast.fire({
            icon: "error",
            title: "Coupon maxAmount is empty"
          });
          return
        }
        if (isNaN(maxAmount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Max Amount must be a number.",
          });
          return;
        }
        if (parseInt(maxAmount) === 0) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Max Amount cannot be zero.",
          });
          return;
        }
        if (!couponDescription) {
          Toast.fire({
            icon: "error",
            title: "couponDescription is empty"
          });
          return
        }


        try {
          const responce = await fetch('/admin/addCoupon', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponCode, discount, startDate, endDate, minAmount, maxAmount, couponDescription })
          })


          const result = await responce.json()
          if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'Coupon added',
              text: result.message,
              confirmButtonText: 'OK'
            }).then(() => {
              window.location.reload();
            })
          } else {
            Swal.fire({
              icon: 'error',
              title: 'error occured',
              text: result.error,
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'An error occurred. Please check your network connection.',
            confirmButtonText: 'OK'
          });
        }


      }

      document.addEventListener("DOMContentLoaded", () => {
        const editBtn = document.querySelectorAll('.editBtn')

        editBtn.forEach((button) => {
          button.addEventListener('click', async () => {

            const couponId = button.getAttribute('data-coupon-id')
            const couponCode = button.getAttribute('data-coupon-code')
            const couponDiscount = button.getAttribute('data-coupon-discount')
            const couponStartDate = button.getAttribute('data-coupon-sdate')
            const couponEndDate = button.getAttribute('data-coupon-edate')
            const couponMaxAmount = parseInt(button.getAttribute('data-coupon-maxAmount'))
            const couponMinAmount = parseInt(button.getAttribute('data-coupon-minAmount'))
            const couponDescription = button.getAttribute('data-coupon-description')
            const startDate = new Date(couponStartDate).toISOString().slice(0, 16);
            const endDate = new Date(couponEndDate).toISOString().slice(0, 16);
            console.log(couponStartDate)
            console.log(couponEndDate)
            document.getElementById('editCouponId').value = couponId
            document.getElementById('editCouponCode').value = couponCode
            document.getElementById('editDiscount').value = couponDiscount
            document.getElementById('editStartDate').value = startDate
            document.getElementById('editEndDate').value = endDate
            document.getElementById('editMinAmount').value = couponMinAmount
            document.getElementById('editMaxAmount').value = couponMaxAmount
            document.getElementById('editDescription').value = couponDescription

            $("#editCouponModal").modal("show")
          })
        })

      })



      async function EditCoupon() {
        const Toast = Swal.mixin({
          toast: true,
          position: "top-end",
          showConfirmButton: false,
          timer: 3000,
          timerProgressBar: true,
          didOpen: (toast) => {
            toast.onmouseenter = Swal.stopTimer;
            toast.onmouseleave = Swal.resumeTimer;
          }
        });
        const couponId = document.getElementById('editCouponId').value.trim()
        const couponCode = document.getElementById('editCouponCode').value.trim()
        const discount = parseInt(document.getElementById('editDiscount').value.trim())
        const startDate = document.getElementById('editStartDate').value.trim()
        const endDate = document.getElementById('editEndDate').value.trim()
        const minAmount = document.getElementById('editMinAmount').value.trim()
        const maxAmount = document.getElementById('editMaxAmount').value.trim()
        const couponDescription = document.getElementById('editDescription').value.trim()

        if (!couponCode) {
          Toast.fire({
            icon: "error",
            title: "Coupon code is empty"
          });
          return
        }
        if (!discount) {
          Toast.fire({
            icon: "error",
            title: "Coupon discount is empty"
          });
          return
        }
        if (isNaN(discount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Percentage",
            text: "Percentage must be a number.",
          });
          return;
        }

        if (discount < 1 || discount > 100) {
          Toast.fire({
            icon: "error",
            title: "Invalid percentage",
            text: 'Percentage not more than 100 and less than 0'
          });
          return
        }
        if (discount !== Math.floor(discount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Percentage Format",
            text: "Percentage must be a whole number.",
          });
          return;
        }


        if (!startDate) {
          Toast.fire({
            icon: "error",
            title: "Coupon startDate is empty"
          });
          return
        }
        const currentDate = new Date()
        if (startDate < currentDate) {
          Toast.fire({
            icon: "error",
            title: "Invalid Start Date",
            text: 'Start date cannot be in the past.',
          });
          return;
        }

        if (!endDate) {
          Toast.fire({
            icon: "error",
            title: "Coupon endDate is empty"
          });
          return
        }
        if (endDate <= startDate) {
          Toast.fire({
            icon: "error",
            title: "Invalid End Date",
            text: 'End date must be after the start date.',
          });
          return;
        }

        if (!minAmount) {
          Toast.fire({
            icon: "error",
            title: "Coupon minAmount is empty"
          });
          return
        }
        if (isNaN(minAmount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Min Amount must be a number.",
          });
          return;
        }
        if (parseInt(minAmount) === 0) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Min Amount cannot be zero.",
          });
          return;
        }
        if (!maxAmount) {
          Toast.fire({
            icon: "error",
            title: "Coupon maxAmount is empty"
          });
          return
        }
        if (isNaN(maxAmount)) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Max Amount must be a number.",
          });
          return;
        }
        if (parseInt(maxAmount) === 0) {
          Toast.fire({
            icon: "error",
            title: "Invalid Amount",
            text: "Max Amount cannot be zero.",
          });
          return;
        }
        if (!couponDescription) {
          Toast.fire({
            icon: "error",
            title: "couponDescription is empty"
          });
          return
        }

        try {
          const responce = await fetch('/admin/editCoupon', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ couponId, couponCode, discount, startDate, endDate, minAmount, maxAmount, couponDescription })
          })


          const result = await responce.json()
          if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'coupon Edited',
              text: result.message,
              confirmButtonText: 'OK'
            }).then(() => {
              window.location.reload();
            })
          } else {
            Swal.fire({
              icon: 'error',
              title: 'error occured',
              text: result.error,
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'An error occurred. Please check your network connection.',
            confirmButtonText: 'OK'
          });
        }

      }

      async function deleteCoupon(couponId){
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to delete this coupon?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes',
            cancelButtonText: 'Close!'
          });
          if (result.isConfirmed) {
        try{
        const responce = await fetch('/admin/deleteCoupon',{
          method:'POST',
          headers:{
            'Content-Type':'application/json'
          },
          body:JSON.stringify({couponId})
        })
        const result = await responce.json()

        if (result.success) {
            Swal.fire({
              icon: 'success',
              title: 'coupon Deleted',
              text: result.message,
              confirmButtonText: 'OK'
            }).then(() => {
              window.location.reload();
            })
          } else {
            Swal.fire({
              icon: 'error',
              title: 'error occured',
              text: result.error,
              confirmButtonText: 'OK'
            });
          }
        } catch (error) {
          Swal.fire({
            icon: 'error',
            title: 'Network Error',
            text: 'An error occurred. Please check your network connection.',
            confirmButtonText: 'OK'
          });
        }
      }
      }
    </script>
    <%- include ('../partial/newAdminFooter')-%>