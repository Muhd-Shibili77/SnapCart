<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OTP Verification</title>
    
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="icon" href="/images/screenshot.png">
   <style>
        body {
            background-color: #f8f9fa; /* light grey background */
        }

        .otp-container {
            width: 100%;
            max-width: 500px;
            margin: 0 auto;
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .otp-input {
            width: 60px;
            height: 60px;
            font-size: 2rem;
            border: none !important;
            border-bottom: 2px solid #878787 !important;
            outline: none;
            margin: 0 10px;
            text-align: center;
        }

        .otp-input:focus {
            border-color: #000;
        }

        .btn-dark {
            background-color: #000;
            color: #fff;
            border-radius: 10px;
            padding: 1rem;
            font-size: 1.2rem;
            width: 100%;
        }

        .bg-white {
            background-color: #fff;
        }

        .p-5 {
            padding: 3rem;
        }

        .rounded-3 {
            border-radius: 1rem;
        }

        .shadow-sm {
            box-shadow: 0 .125rem .25rem rgba(0,0,0,.075)!important;
        }

        .border {
            border: 1px solid #dee2e6!important;
        }

        .text-center {
            text-align: center!important;
        }

        .text-muted {
            color: #6c757d!important;
        }

        .mb-3 {
            margin-bottom: 1rem!important;
        }

        .mb-5 {
            margin-bottom: 3rem!important;
        }

        .btn-link {
            background: none;
            border: none;
            color: #007bff;
            padding: 0;
            font-size: 1rem;
            cursor: pointer;
        }

        .alert {
            display: none;
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 5px;
            font-size: 1rem;
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>

<div class="otp-container d-flex flex-column align-items-center justify-content-center">
    <div class="bg-white p-5 rounded-3 shadow-sm border text-center">
        <h2 class="mb-3">OTP Verification</h2>
        <p class="text-muted mb-5">Please enter the four-digit code</p>

        <div id="timer" class="text-muted mb-3">Time remaining: <span id="time">01:00</span></div>

        <div id="message" class="alert"></div>

        <form id="otpForm">
            <div class="d-flex justify-content-center gap-2 mb-5">
                <input type="text" name="otp1" class="otp-input" id="otp1" maxlength="1" oninput="moveToNext(this, 'otp2')" onkeydown="moveToPrevious(event, 'otp1')" required>
                <input type="text"  name="otp2" class="otp-input" id="otp2" maxlength="1" oninput="moveToNext(this, 'otp3')" onkeydown="moveToPrevious(event, 'otp1')" required>
                <input type="text" name="otp3" class="otp-input" id="otp3" maxlength="1" oninput="moveToNext(this, 'otp4')" onkeydown="moveToPrevious(event, 'otp2')" required>
                <input type="text" name="otp4" class="otp-input" id="otp4" maxlength="1" onkeydown="moveToPrevious(event, 'otp3')" required>
            </div>
           

            <button type="button" onclick="VerifyOTP()" class="btn-dark">Verify OTP</button>
        </form>

        <form  class="mt-3" id="resendOTPForm" style="display: none;">
            <button type="button" onclick="resendOTP()" class="btn">Resend OTP</button>
        </form>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Function to move focus to the next input field
    function moveToNext(current, nextFieldID) {
        if (current.value.length === current.maxLength) {
            $("#" + nextFieldID).focus();
        }
    }

    // Function to move focus to the previous input field on Backspace
    function moveToPrevious(event, previousFieldID) {
        if (event.key === 'Backspace' && !event.target.value) {
            $("#" + previousFieldID).focus();
        }
    }

    // Timer setup
    let timeLeft = 60; // 1 minutes in seconds
    const timerElement = $("#time");

    const timerInterval = setInterval(() => {
        let minutes = Math.floor(timeLeft / 60);
        let seconds = timeLeft % 60;

        // Format time as MM:SS
        minutes = minutes < 10 ? '0' + minutes : minutes;
        seconds = seconds < 10 ? '0' + seconds : seconds;

        // Display the time remaining
        timerElement.text(`${minutes}:${seconds}`);

        // Decrement the time left
        timeLeft--;

        // If the timer reaches zero, disable the form and stop the timer
        if (timeLeft < 0) {
            clearInterval(timerInterval);
            $("#otpForm button[type='submit']").prop('disabled', true);
            showMessage('Time expired! Please request a new OTP.', 'danger');
            $("#resendOTPForm").show();
        }
    }, 1000); // Update the timer every second

    // Show message function
    function showMessage(message, type) {
        const messageElement = $("#message");
        messageElement.removeClass('alert-success alert-danger').addClass(`alert-${type}`).text(message).show();
    }

    
    // Handle Resend OTP Form Submission with AJAX
    document.getElementById("resendOTPForm").addEventListener("submit", function(event) {
    event.preventDefault(); // Prevent the default form submission

    axios.post('/resendOtp')
        .then(function(response) {
            showMessage(response.data.message, 'success');

            timeLeft = 60; // Reset the timer

            clearInterval(timerInterval); // Clear the existing timer interval if it's running

            // Restart the timer
            timerInterval = setInterval(function() {
                if (timeLeft <= 0) {
                    clearInterval(timerInterval); // Stop the timer when it reaches zero
                } else {
                    timeLeft--; // Decrement the timer
                }
            }, 1000); // Set interval to 1 second
        })
        .catch(function(error) {
            const errorMessage = error.response && error.response.data ? error.response.data.message : 'An error occurred. Please try again later.';
            showMessage(errorMessage, 'danger');
        });
});


async function VerifyOTP() {
    const OTP1 = document.getElementById('otp1').value.trim();
    const OTP2 = document.getElementById('otp2').value.trim();
    const OTP3 = document.getElementById('otp3').value.trim();
    const OTP4 = document.getElementById('otp4').value.trim();
    const otp = OTP1 + OTP2 + OTP3 + OTP4;

    // Check if OTP is empty
    if (!otp) {
        Swal.fire({
            icon: "error",
            title: 'OTP is empty',
            text: 'OTP field cannot be empty',
            confirmButtonText: 'OK'
        });
        return;
    }

    // Send the OTP to the server
    const response = await fetch('/user/forgetOtp', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ otp }) // Make sure to match the key on the server-side
    });

    // Handle the response from the server
    if (response.ok) {
        const result = await response.json(); // Parse the JSON response
       
        // Check for success message or error message
        if (result.message) {
            // Show success message and redirect on success
            Swal.fire({
                icon: "success",
                title: 'OTP Verified',
                text: result.message, // Display success message
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = '/user/passwordChange'; // Redirect after confirmation
            });
        } else {
            // Show error message if OTP verification fails
            Swal.fire({
                icon: "error",
                title: 'Verification Failed',
                text: result.error, // Display the error message from the server
                confirmButtonText: 'OK'
            });
        }
    } else {
        // Handle network errors or other issues
        Swal.fire({
            icon: "error",
            title: 'Error',
            text: 'An error occurred. Please try again later.',
            confirmButtonText: 'OK'
        });
    }
}




async function resendOTP() {
    try {
        // Send a request to resend OTP
        const response = await fetch("/user/forgetResendOtp", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });

        if (response.ok) {
            // Show success message
            Swal.fire({
                icon: "success",
                title: 'OTP Resent',
                text: 'A new OTP has been sent to your email.',
                confirmButtonText: 'OK'
            }).then(()=>{
                location.reload();
            })
        } else {
            // Show error message
            Swal.fire({
                icon: "error",
                title: 'Error',
                text: 'Failed to resend OTP. Please try again later.',
                confirmButtonText: 'OK'
            });
        }
    } catch (error) {
        // Handle network errors
        Swal.fire({
            icon: "error",
            title: 'Error',
            text: 'An error occurred. Please try again later.',
            confirmButtonText: 'OK'
        });
    }
}


</script>

</body>
</html>